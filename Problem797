import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class Solution {

	private Stack<Integer> stack = new Stack<Integer>();
	private List<List<Integer>> result;

	public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
		//visited = new boolean[graph.length];
		result = new ArrayList<List<Integer>>();
		int[][] adj = new int[graph.length][graph.length];
		for(int i=0; i<graph.length; ++i){
			for(int j=0; j<graph[i].length; ++j){
				adj[i][graph[i][j]] = 1;
			}
		}
		dfs(0, adj);
		return result;
	}

	private void dfs(int i, int[][] adj) {
		//visited[i] = true;
		stack.push(i);
		if (i == adj.length - 1) {
			List<Integer> list = new ArrayList<Integer>();
			for (Integer p : stack) {
				list.add(p);
			}
			result.add(list);
		}
		for(Integer j = 0; j<adj.length; ++j){
			if(adj[i][j] != 0 && stack.contains(j)==false){
				dfs(j, adj);
			}
		}
		stack.pop();
	}

	public static void main(String[] args) {
		Solution solution = new Solution();
		
		List<List<Integer>> ret = solution.allPathsSourceTarget(new int[][]{{1,2}, {3}, {3}, {}});
		System.out.println(ret);

	}

}
